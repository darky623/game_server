"""correct

Revision ID: 31224bc5737c
Revises: c483673aa133
Create Date: 2024-09-11 23:57:00.231360

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "31224bc5737c"
down_revision: Union[str, None] = "c483673aa133"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "rewards",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("icon", sa.LargeBinary(), nullable=True),
        sa.Column("content", sa.Text(), nullable=True),
        sa.Column("reward_type", sa.String(length=25), nullable=True),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "biomes",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=25), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("difficulty_lvl", sa.Integer(), nullable=True),
        sa.Column("reward_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["reward_id"],
            ["rewards.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "bosses",
        sa.Column("boss_id", sa.Integer(), nullable=False),
        sa.Column("character_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["characters.id"],
        ),
        sa.PrimaryKeyConstraint("boss_id"),
    )
    op.create_table(
        "biome_levels",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("number_of_lvl", sa.Integer(), nullable=True),
        sa.Column("biome_id", sa.Integer(), nullable=True),
        sa.Column("boss_id", sa.Integer(), nullable=True),
        sa.Column("reward_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["biome_id"],
            ["biomes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["boss_id"],
            ["bosses.boss_id"],
        ),
        sa.ForeignKeyConstraint(
            ["reward_id"],
            ["rewards.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "boss_abilities",
        sa.Column("boss_id", sa.Integer(), nullable=False),
        sa.Column("ability_id", sa.Integer(), nullable=False),
        sa.Column("biome_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["ability_id"],
            ["abilities.id"],
        ),
        sa.ForeignKeyConstraint(
            ["biome_id"],
            ["biomes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["boss_id"],
            ["bosses.boss_id"],
        ),
        sa.PrimaryKeyConstraint("boss_id", "ability_id", "biome_id"),
    )
    op.create_table(
        "player_progress",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("player", sa.Integer(), nullable=True),
        sa.Column("biome_id", sa.Integer(), nullable=True),
        sa.Column("biome_level_id", sa.Integer(), nullable=True),
        sa.Column("difficult_lvl", sa.Integer(), nullable=True),
        sa.Column("battles", sa.Integer(), nullable=True),
        sa.Column("victories", sa.Integer(), nullable=True),
        sa.Column("defeats", sa.Integer(), nullable=True),
        sa.Column("current_difficulty_level", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["biome_id"],
            ["biomes.id"],
        ),
        sa.ForeignKeyConstraint(
            ["biome_level_id"],
            ["biome_levels.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_player_progress_id"), "player_progress", ["id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_player_progress_id"), table_name="player_progress")
    op.drop_table("player_progress")
    op.drop_table("boss_abilities")
    op.drop_table("biome_levels")
    op.drop_table("bosses")
    op.drop_table("biomes")
    op.drop_table("rewards")
    # ### end Alembic commands ###
